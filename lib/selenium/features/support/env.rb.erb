require 'minitest/unit'
require 'capybara/cucumber'
require 'selenium-webdriver'

Capybara.match = :first
Capybara.default_selector = :css

Capybara.default_max_wait_time = 40
puts "デフォルト最大待ち時間: #{Capybara.default_max_wait_time} 秒"

Capybara.run_server = false

# デバイス <<--> ドライバ
class HaenawaDevice
  def resize_window(width, height)
    Capybara.current_session.driver.browser.manage.window.resize_to(width, height)
  end

  def save_screenshot(world, options = {})
    step_no = options[:step_no]
    save_dir = options[:save_dir]
    save_path = "#{save_dir}/img_#{step_no}.png"
    tmp_save_path = "#{save_dir}/tmp_img_#{step_no}.png"

    FileUtils.mkdir_p(File.dirname(save_path))
    world.page.driver.save_screenshot(tmp_save_path, screenshot_options)
    FileUtils.mv(tmp_save_path, save_path)
  end

  def screenshot_options
    {}
  end
end

class HaenawaSelenium < HaenawaDevice
  def initialize
    Capybara.register_driver :selenium do |app|
      driver(app)
    end
    Capybara.default_driver = :selenium
  end

  def driver(app)
    Capybara::Selenium::Driver.new(app, options)
  end

  def options
    raise NotImplementedError
  end
end

class HaenawaHeadlessChrome < HaenawaSelenium
  def options
    options = Selenium::WebDriver::Chrome::Options.new
    options.add_argument('--headless')
    # 現状はWindowsだと以下のオプションが必要。
    # https://developers.google.com/web/updates/2017/04/headless-chrome
    options.add_argument('--disable-gpu')
    {
      browser: :chrome,
      options: options
    }
  end
end

class HaenawaSeleniumRemote < HaenawaSelenium
  def driver(app)
    driver = super
    driver.browser.file_detector = lambda do |args|
      str = args.first.to_s
      str if File.exist? str
    end
    driver
  end

  def options
    {
      desired_capabilities: caps,
      url: "http://#{ENV['REMOTE']}:4444/wd/hub",
      browser: :remote,
      http_client: Selenium::WebDriver::Remote::Http::Default.new(open_timeout: 90, read_timeout: 90)
    }
  end

  def caps
    raise NotImplementedError
  end
end

class HaenawaChrome < HaenawaSeleniumRemote
  def caps
    Selenium::WebDriver::Remote::Capabilities.chrome
  end
end

class HaenawaIe < HaenawaSeleniumRemote
  def caps
    Selenium::WebDriver::Remote::Capabilities.internet_explorer
  end

  def save_screenshot(world, options = {})
    sleep 3
    super
  end
end

class HaenawaFirefox < HaenawaSeleniumRemote
  def caps
    Selenium::WebDriver::Remote::Capabilities.firefox
  end
end

class HaenawaAndroid < HaenawaSeleniumRemote
  def initialize
    Capybara.default_driver = :selenium
    Capybara.register_driver :selenium do |app|
      client = Selenium::WebDriver::Remote::Http::Default.new
      client.timeout = 90
      opts = {
        desired_capabilities: {
          deviceName:   'emulator-5554',
          platformName: :android,
          browserName:  'Browser'
        },
        url:          "http://#{ENV['REMOTE']}:4444/wd/hub",
        browser:      :remote,
        http_client:  client
      }

      driver = Capybara::Selenium::Driver.new(app, opts)
        driver.browser.file_detector = lambda do |args|
          str = args.first.to_s
          str if File.exist? str
        end
      driver
    end
  end

  def resize_window(w, h)
    # do nothing
  end

  def save_screenshot(world, options = {})
    # do nothing
  end
end

class HaenawaIos < HaenawaSeleniumRemote
  def caps
    {
      deviceName:   self.device_name,
      platformName: :iOS,
      browserName:  'safari'
    }
  end

  def device_name
    raise NotImplementedError
  end

  def resize_window(w, h)
    puts "HaenawaIos#resize_window is called; do nothing"
    # do nothing
  end
end

class HaenawaIphone6 < HaenawaIos
  def device_name
    'iPhone 6'
  end
end

class HaenawaIpadPro < HaenawaIos
  def device_name
    'iPad Pro'
  end
end

def camelize(str)
  str.capitalize.gsub(/(?:_|(\/))([a-z\d]*)/i) { "#{$1}#{$2.capitalize}" }.gsub('/', '::')
end

# simple constantize
def constantize(str)
  Object.const_get(str)
end

Capybara.server_port = (ENV['APP_PORT'] || '443').to_i
case Capybara.server_port
when 443
  Capybara.app_host = "https://#{ENV['APP_HOST']}"
when 80
  Capybara.app_host = "http://#{ENV['APP_HOST']}"
else
  Capybara.app_host = "http://#{ENV['APP_HOST']}:#{Capybara.server_port}"
end
puts "アプリケーションホスト: #{Capybara.app_host}"

# Factory to create HaenawaX from ENV['DEVICE'] and run
haenawa_device_str  = "Haenawa#{camelize(ENV['DEVICE'])}"
puts "device class string: " + haenawa_device_str
$device = constantize(haenawa_device_str).new

# run before each scenario
Before do
  $device.resize_window(1280, 720)
end
